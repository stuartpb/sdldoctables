local SDLdat = require 'data'

local scancodes = SDLdat.scancodes
local comments = SDLdat.comments
local keycodes = SDLdat.keycodes
local names = SDLdat.names

--Massive combined table writer-----------------------------------------------

--Open the output file to direct writing to
--Comment me out to use stdout
io.output"Combined_Table.txt"

--Function that writes all arguments, then a newline.
local function writeline(...)
  io.write(...)
  io.write'\n'
end

local function htmlent(byte)
  return string.format("&#%d;",byte)
end

--Write the introduction
writeline[=[
#pragma section-numbers off
#pragma disable-camelcase
||<tablewidth="100%" style="color: #FF0000;" :> DRAFT||

= SDL_Scancode and SDL_Keycode =
The SDL physical and virtual key representations.

SDL_ScanCode values are used to represent the physical location of a keyboard key on the keyboard. Values of this type are used to represent keyboard keys in the key.keysym.scancode field of the [[SDL_Event]] structure, among other places. The values in the SDL_ScanCode enumeration are based on the USB usage page standard (http://www.usb.org/developers/devclass_docs/Hut1_12.pdf).

SDLKey values (also known as keycodes or keysyms) are mapped to the current layout of the keyboard and correlate to an [[SDL_scancode]]. Values of this type are used to represent key symbols in the key.keysym.sym field of the [[SDL_Event]] structure, among other places. The values in the SDLKey enumeration are based on Unicode values representing the unmodified character that would be generated by pressing the key, or the scancode value with the high bit set (bitwise ANDed with 0x8000000) for those keys that do not generate characters.

The main difference between these two values comes in to play in situations where the operating system is mapping the physical keyboard keys to different virtual letters. For instance, when a standard QWERTY keyboard is mapped to a German QWERTZ layout, the "Y" key will generate events with a scancode of SDL_SCANCODE_Y, but a keycode of SDLK_z. Which to use is left to the application: scancodes are suited in situations where controls are layout-dependent (eg. the "WASD" keys as left-handed arrow keys), wheras keycodes are better suited to situations where controls are character-dependent (eg. the "I" key for '''I'''nventory).

Scancode constants use the symbol name prefixed with SDL_SCANCODE_. Keycode constants use the symbol name (lowercased for letters) prefixed with SDLK_.

The name of a key can be obtained using [[SDLGetKeyName]] with the keycode or [[SDLGetScancodeName]] with the scancode.
]=]

--Write the table header
writeline"||Symbol||Scancode||Keycode||Name||"

--Synthesize table of symbols in order
local symbols={}; do
  --populate table with the keys to the Scancodes
  for k in pairs(scancodes) do
    symbols[#symbols+1] = k
  end

  --sort the symbols by order of the scancodes
  table.sort(symbols,function(m,n)
    return scancodes[m] < scancodes[n]
  end)

  --convert all symbols to be just the symbolic part
  for k,v in pairs(symbols) do
    symbols[k]=string.match(v,"SDL_SCANCODE_(.*)")
  end
end

local writerow
function writerow(symbol)
  local scancodename, keysymname

  --' and ` have mismatched names
  if symbol == "APOSTROPHE" then
    scancodename = "SDL_SCANCODE_APOSTROPHE"
    keysymname = "SDLK_QUOTE"
  elseif symbol == "GRAVE" then
    scancodename = "SDL_SCANCODE_GRAVE"
    keysymname = "SDLK_BACKQUOTE"

  --every other key's keycode name matches the scancode name,
  --except for the single-character letters which are lowercase
  else
    scancodename="SDL_SCANCODE_"..symbol
    keysymname="SDLK_"..(#symbol==1 and string.lower(symbol) or symbol)
  end

  local scancode=scancodes[scancodename]

  --Writes a row with a note
  local function writenoterow(text)
    return writeline([[||||||||<bgcolor="#EDEDED">'']],text,"''||")
  end

  --Write notes before certain keys' rows
  if scancode == 4 then --A
    writenoterow "These values are mapped from usage page 0x07 (USB keyboard page)"

  elseif scancode == 130 then --LOCKINGCAPSLOCK
    writenoterow "The keys below are commented out in SDL_scancode.h"

  elseif scancode == 133 then --KP_COMMA
    writenoterow "The keys above are commented out in SDL_scancode.h"

  elseif scancode == 258 then --AUDIONEXT
    writenoterow "These values are mapped from usage page 0x0C (USB consumer page)"

  elseif scancode == 275 then --BRIGHTNESSDOWN
    writenoterow "These are values that Christian Walther added (for mac keyboard?)"

  end

  local keycode=keycodes[keysymname]

  --The description of the keycode
  local kcdesc

  --If this key has a keycode
  if keycode then
    --format converted scancodes (the ones that won't fit into a byte)
    --differently
    if keycode > 255 then
      kcdesc = string.format("''0x%X''", keycode)
    else
      --The printable character used in the description
      local kcchar = string.char(keycode)

      --Handle special character values
      if kcchar=='\b' then
        kcchar=[[\b]]
      elseif kcchar=='\t' then
        kcchar=[[\t]]
      elseif kcchar=='\r' then
        kcchar=[[\r]]
      elseif kcchar=='\n' then
        kcchar=[[\n]]
      elseif kcchar=='\\' then
        kcchar=[[\\]]
      elseif kcchar=="'" then
        kcchar=[[\']]
      elseif kcchar=='"' then
        kcchar=[[\"]]

      elseif keycode==0 or keycode >= 127 then
        --SDLK_UNKNOWN is defined as 0
        --SDLK_DELETE is defined as decimal 177,
        --and assumedly other syms would follow suit
        kcchar = string.format("\\%d",keycode)

      elseif keycode==27 then
        --SDLK_ESCAPE is defined as octal 33
        kcchar = string.format("\\0%o",keycode)
      end

      --tilde and grave are pretty much a nightmare in the wiki encoding-
      --HTML-encode them so they can't interfere with the markup
      kcchar = string.gsub(kcchar,"['`]",htmlent(keycode))

      --For all other cases, just use the character plain

      --put the character between single quotes
      kcchar = "'"..kcchar.."'"

      --Describe the keycode value
      kcdesc = string.format("%i (0x%02X, %s)",keycode,keycode,kcchar)
    end

  --If there's no keycode for this key, state that
  else kcdesc="''(none)''" end

  --The name of the key is the index of the scancode into the array of names
  --(plus one because the 0 index from the C array is at 1 in Lua)
  local name = names[scancode+1]

  --Format the name appropriately
  if name then
    if name=="'" or name=='`' then
      --see above comment about tilde and grave
      name = htmlent(string.byte(name))
    end
    name = "'''"..name.."'''"
  else name="''(none)''" end

  --If there are comments for this key, append them to the name field
  if comments[symbol] then name = name .. '; '..comments[symbol] end

  --Bars in names wreak havok like tildes and apostrophes
  name = string.gsub(name,'[|]',
    function(bar) return htmlent(string.byte(bar)) end)

  --Write the row for this key's entry
  writeline("||`",symbol,"`||",tostring(scancode),"||",kcdesc,"||",name, "||")
end

--Write rows for each key
for i=1,#symbols do
  writerow(symbols[i])
end

--Write the footer
writeline[=[

== Code Examples ==
{{{#!highlight cpp
  //checks if a key is being remapped and prints what the remapping is
  if(event->key.keysym.scancode != SDL_GetScancodeFromKey(event->key.keysym.sym))
    printf("Physical %s key acting as %s key",
      SDL_GetScancodeName(event->key.keysym.scancode),
      SDL_GetKeyName(event->key.keysym.sym));
}}}

== Related Enumerations ==
 .[[SDL_Scancode]]
 .[[SDL_Keycode]]

== Related Functions ==
 .[[SDL_GetKeyboardState]]
 .[[SDL_GetKeyFromScancode]]
 .[[SDL_GetScancodeFromKey]]
 .[[SDL_GetKeyName]]
 .[[SDL_GetScancodeName]]

----
(no category)
]=]

